<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="rfc7991bis.rnc"?>
<!-- Required for schema validation and schema-aware editing -->
<!-- <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> -->
<!-- This third-party XSLT can be enabled for direct transformations in XML processors, including most browsers -->

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<!-- If further character entities are required then they should be added to the DOCTYPE above.
     Use of an external entity file is not recommended. -->

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="std"
  docName="draft-equinox-v6ops-icmpext-xlat-v6only-source-00"
  ipr="trust200902"
  obsoletes=""
  updates="7915"
  submissionType="IETF"
  consensus="true"
  xml:lang="en"
  version="3">
  <front>
    <title abbrev="icmpext-xlat-source">Using Dummy IPv4 Address and Node Identification Extensions for IP/ICMP translators (XLATs)</title>
    <seriesInfo name="Internet-Draft" value="draft-equinox-v6ops-icmpext-xlat-v6only-source-00"/>

    <author fullname="David 'equinox' Lamparter" initials="D" surname="Lamparter">
      <organization>NetDEF, Inc.</organization>
      <address>
        <postal>
          <city>San Jose</city>
          <country>USA</country>
        </postal>
        <email>equinox@diac24.net</email>
        <email>equinox@opensourcerouting.org</email>
      </address>
    </author>
    <author fullname="Jen Linkova" initials="J" surname="Linkova">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1 Darling Island Rd</street>
          <city>Pyrmont</city>
          <region>NSW</region>
          <code>2009</code>
          <country>AU</country>
        </postal>
        <email>furry13@gmail.com</email>
        <email>furry@google.com</email>
      </address>
    </author>

    <date year="2024"/>
    <area>Ops</area>
    <workgroup>IPv6 operations</workgroup>
    <keyword>ipv6</keyword>
    <keyword>ipv4</keyword>
    <keyword>clat</keyword>
    <keyword>traceroute</keyword>
    <keyword>nat64</keyword>


    <abstract>
      <t>
          This document suggests that when a source IPv6 address of an ICMPv6 message can not be translated to an IPv4 address, the protocol translators use the dummy IPv4 address (192.0.0.8) to translate the IPv6 source address, and utilize the ICMP extension for Node Identification (draft-ietf-intarea-extended-icmp-nodeid) to carry the original IPv6 source address of ICMPv6 messages.
      </t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
          Source, version control history, and issue tracker for this draft can
          be found at <eref target="https://github.com/eqvinox/icmpext-clat-source"/>.
      </t>
      <t>
          (Note the draft was renamed (clat â†’ xlat) prior to submission but
          changing the repository name on github breaks too many things to be
          worth the effort.)
      </t>
    </note>
  </front>

  <middle>
    <section>
      <name>Introduction</name>
      <t>
To allow communication between IPv6-only and IPv4-only devices, IPv4/IPv6 translators translate IPv6 and IPv4 packet headers according to the IP/ICMP Translation Algorithm defined in <xref target="RFC7915"/>.
For example, 464XLAT (<xref target="RFC6877"/>) defines an architecture for providing IPv4 connectivity across an IPv6-only network. The solution contains two key elements: provider-side translator (PLAT) and customer-side translator (CLAT). CLAT implementations translate private IPv4 addresses to global IPv6 addresses, and vice versa, as defined in <xref target="RFC7915"/>. 
</t>
<t>

To map IPv4 addresses to IPv6 ones the translators use the translation prefix (either a well-known or a network-specific one, see <xref target="RFC6052"/>). The resulting IPv6 addresses can be statelessly translated back to IPv4.
However it's not the case for an arbitrary global IPv6 addresses. Those addresses can only be translated to IPv4 by a stateful translators and only if the corresponding translation rule exists.
</t>
<t>
One of scenarios when it might be required but not currently possible is translating ICMPv6 error messages send by intermediate nodes to the CLAT address in the 464XLAT envinronment. The most typical example is a diagnistic tool like traceroute sending packets to an IPv4 destination from an IPv6-only host.
Received ICMPv6 Time Exceeded are translated to ICMP Time Exceeded. If those packets were originated from an IPv4 address and translated to ICMPv6 by the PLAT (NAT64) device, then the source address of such packet can be mapped back to IPv4 by removing the translation prefix. However ICMPv6 error messages sent by devices located between the IPv6-only host and the NAT64 device have "native" IPv6 source addresses, which can not be mapped back to IPv4.
Those packets are usually dropped and tools like traceroute can not represent IPv6 intermediate hops in any meaningful way. Such behaviour complicates troubleshooting. It's also confusing for users and increases operational costs, as users report packet loss in the network based on traceroute output.
</t>
      <t>
Some CLAT implementations are known to workaround this issue by representing IPv6 addresses in IPv4 traceroute by using a reserved IPv4 address space and using the hop limit as the last octet, so an IPv6 device 5 hops away is shown as 225.0.0.5 etc.
      </t>
<t>
It should be noted that the similar issue occurs in IPv6 Data Center Environments when an ICMPv6 error message needs to be sent to an IPv4-only client.
As per Section 4.8 of <xref target="RFC7755"/>, ICMPv6 error packets are usually dropped by the translator.
</t>
<t>
<xref target="I-D.ietf-intarea-extended-icmp-nodeid"/> defines the Node Identification Object which can carry an IP Address Sub-Object, containing an IP address.
This document proposes that when an ICMPv6 error message is translated to an ICMP one, and the IPv6 source address can not be mapped or translated to an IPv4 one, the translator uses the dummy IPv4 address as an IPv4 source one and appends the Node Identification Object with the IP Address Sub-Object, containing the original IPv6 address of an ICMPv6 error message.
</t>
    </section>

    <section>
      <name>Requirements Language</name>
      <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
          interpreted as described in BCP 14 <xref target="RFC2119"/>
          <xref target="RFC8174"/> when, and only when, they appear in
          all capitals, as shown here.
       </t>
    </section>

<section>
<name>Terminology</name>

<t>
Translator: a device performing translaton between IPv6 and IPv4 packet headers according to the IP/ICMP Translation Algorithm defined in <xref target="RFC7915"/>. Translators can be stateless (<xref target="RFC7915"/>) or stateful (<xref target="RFC6146"/>).
</t>
<t>
Translatable IPv6 address: an IPv6 address which matches the NAT64 prefix known to the translator, or for which the translator has a stateful entry, mapping that IPv6 address to an IPv4 one.
</t>
<t>
Untranslatable IPv6 address: an IPv6 address which does not match the NAT64 prefix(es) configured on the translator, and for which the translator does not have a stateful entry, mapping this IPv6 address to an IPv4 one. 
</t>

</section>

    <section anchor="xlat">
      <name>Translation Behavior</name>

      <section anchor="xlat-overview">
      <name>Overview</name>
      <t>
          Whenever a translator translates an ICMPv6 Destination Unreachable, ICMPv6 Time Exceeded or ICMPv6 Packet too Big (<xref target="RFC4443"/>) to the corresponding ICMPv4 (<xref target="RFC0792"/>) message, and the IPv6 source address in the outermost IPv6 header is untranslatable one, the translator SHOULD use the dummy IPv4 address (192.0.0.8) as IPv4 source address for the translated packet.
</t>
<t>
To preserve the original IPv6 source address of the packet, the translator SHOULD append a Node Identification Object (<xref target="I-D.ietf-intarea-extended-icmp-nodeid"/>) with the IP Address Sub-Object containing the IPv6 source address of the ICMPv6 packet.
</t>
      <t>
          The translator MUST NOT use 192.0.0.8/32 to translate the source IPv6 address and MUST NOT add the extension if the packet IPv6 source address is translatable.
      </t>
    </section>

<section>
<name>Adding Node Identification Extension Object</name>
<t>
Node Identification Extension Object SHOULD be added when translating:
</t>
<ul>
<li>
<t>
ICMPv6 Destination Unreachable to ICMPv4 Destination Unreachable
</t>
</li>
<li>
<t>
ICMPv6 Time Exceeded to ICMPv4 Time Exceeded.
</t>
</li>
<li>
<t>
ICMPv6 Packet Too Big to ICMPv4 Destination Unreachable.
</t>
</li>
</ul>
<t>
and the IPv6 source address in the outermost IPv6 header is untranslatable.
</t>
<t>
Node Identification Extension Object MUST NOT be added in any other cases.
</t>

<t>
When adding the Node Identification Extension Object, the translator MUST include the IP Address Sub-Object containing the original IPv6 source address of the packet, and MUST NOT include any other Sub-Objects.
</t>

<section>
<name>Order of Operations and Translating ICMPv6 Packet Too Big</name>

<t>
This specification does not prescribe whether the Node Identification Extension Object is added before or after translating an ICMPv6 message to ICMPv4.
This choice is up to the implementation. However ICMP Extensions can not be added to ICMPv6 Packet Too Big messages (see Section 4.6 of <xref target="RFC4884"/>). Therefore in order to be able to add the Node Identification Extension Object and preserve the original untranslatable IPv6 address, the translator needs to add the object to the resulting ICMPv4 packet after it's been translated from ICMPv6.
The translator MAY choose not to append  the Node Identification Extension Object when translating ICMPv6 Packet Too Big to ICMPv4 Destination Unreachable.
Such implementations SHOULD still translate ICMPv6 Packet Too Big frmom untranslatable sources using  192.0.0.8 as an IPv4 source address and SHOULD NOT drop those packets.
</t>

</section>


<section>
<name>
Adding New ICMP Extension Structure
</name>
<t>
If the original ICMPv6 message does not contain an ICMP Extension Structure (as defined in Section 7 of <xref target="RFC4884"/>), the translator SHOULD append a new ICMP Extension Structure to the ICMP message.
When adding the new Extension Structure, the translator MUST:
</t>
<ul>
<li>
<t>
Create a new ICMP Extension Structure, containing one Extension Header and one Node Identification Extension object. 
The Node Identification Extension object MUST contain a IP Address Sub-Object, carrying the IPv6 source address of the ICMPv6 message being transtaled.
</t>
</li>
<li>
<t>
Append that Extension Structure to the ICMP message.
</t>
</li>
<li>
<t>
If the resulting packet size exceeds the minimum IPv6 MTU: truncate the embedded invoking packet by removing the trailing 28 octets (to accomodate for 4 octets of the extension header and 24 octets of the extension object).
</t>
</li>
<li>
<t>
Set the length field of the ICMP message to the length of the padded "original datagram" field, measured in 32-bit words.
</t>
</li>
</ul>
</section>
<section>
<name>
Adding Node Identification Extension Object to Existing ICMP Extension Structure
</name>
<t>
If the original ICMPv6 message already contains an ICMP Extension Structure, the translator SHOULD append a Node Identification Extension object containing the IP Address Sub-Object to that structure.
When appending the object, the translator MUST:
</t>
<ul>
<li>
<t>
Create a Node Identification Extension object containing the IP Address Sub-Object. The IP Address Sub-Object MUST contain the original source IPv6 address of the ICMPv6 message being translated.
</t>
</li>
<li>
<t>
Append Node Identification Extension object to the Extension Structure.
</t>
</li>
<li>
<t>
Update the checksum field of the Extension Header accordingly.
</t>
</li>
<li>
<t>
If the resulting packet size exceeds the minimum IPv6 MTU: truncate the embedded invoking packet by removing the trailing 24 octets (to accomodate for 24 octets of the extension object) and update the length field of the ICMP message
</t>
</li>
</ul>
</section>
</section>

</section>

<section>
<name>
Updates to RFC7915
</name>
<t>
This document makes the following changes to Section 5.1 of <xref target="RFC7915"/>:
</t>
<t>
The text in RFC7915 is as follows:
</t>
<blockquote>
Source Address:  Mapped to an IPv4 address based on the algorithms presented in Section 6.
</blockquote>
<t>
This document updates the text as follows:
</t>
<blockquote>
Source Address:  Mapped to an IPv4 address based on the algorithms presented in Section 6.
When translating ICMPv4 error messages to ICMPv6 error messages and the valid IPv6 source address in the outermost IPv6 header does not match the prefix used in algorithmic mapping, the translator SHOULD follow the recommendations in draft-equinox-intarea-icmpext-xlat-source.
</blockquote>
<t>
This document also adds the following paragraph before the very last paragraph of Section 5.2 of <xref target="RFC7915"/> (before "Error payload:"):
</t>
<blockquote>
If valid IPv6 source address in the outermost IPv6 header of the ICMPv6 messages does not match the prefix used in algorithmic mapping, the translator SHOULD follow the recommendations in draft-equinox-intarea-icmpext-xlat-source.
</blockquote>
</section>

    <section anchor="security">
      <name>Security Considerations</name>
      <t>
          TBD. 
      </t>
    </section>
    <section anchor="privacy">
      <name>Privacy Considerations</name>
      <t>
This document does not introduce any privacy considerations.
      </t>
    </section>
    <section anchor="IANA">
      <name>IANA Considerations</name>
      <t>
This memo includes no request to IANA.
      </t>
    </section>
  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.0792.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.4443.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.4884.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.6052.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7915.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.6877.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7757.xml"/>
	<xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-intarea-extended-icmp-nodeid.xml"/>
      </references>
     <references>
        <name>Informative References</name>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.6146.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7755.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7600.xml"/>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false">
      <name>Acknowledgements</name>
      <t>
          This document is the result of discussions with Thomas Jensen.
          The authors would like to thank Darren Dukes, Bill Fenner for their feedback, comments and guidance.
      </t>
    </section>
 </back>
</rfc>
